/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.ufpr.lpooii.view.autor;

import java.awt.event.MouseAdapter;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import org.ufpr.lpooii.controller.AutorController;
import org.ufpr.lpooii.model.Autor;
import org.ufpr.lpooii.model.Livro;

/**
 *
 * @author Lia
 */
public class JanelaAutorView extends javax.swing.JFrame {

    private int linhaClicadoParaAtualizacao = -1;
    /**
     * Creates new form JanelaAutorView
     */
    public JanelaAutorView() {
        initComponents();
        
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        botoesAutorView = new org.ufpr.lpooii.view.autor.BotoesAutorView();
        tabelaAutorView = new org.ufpr.lpooii.view.autor.TabelaAutorView();
        formularioAutorView = new org.ufpr.lpooii.view.autor.FormularioAutorView();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(botoesAutorView, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(tabelaAutorView, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addComponent(formularioAutorView, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(botoesAutorView, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(tabelaAutorView, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(formularioAutorView, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.ufpr.lpooii.view.autor.BotoesAutorView botoesAutorView;
    private org.ufpr.lpooii.view.autor.FormularioAutorView formularioAutorView;
    private org.ufpr.lpooii.view.autor.TabelaAutorView tabelaAutorView;
    // End of variables declaration//GEN-END:variables

    private AutorTableModel autorTableModel = new AutorTableModel();
    private AutorController controllerAutor;

    public void setController(AutorController controller) {
        botoesAutorView.setController(controller);
        
        tabelaAutorView.getTabelaAutor().addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                
                linhaClicadoParaAtualizacao =  tabelaAutorView.getTabelaAutor().rowAtPoint(evt.getPoint());
                
                Autor autor = autorTableModel.getAutor(linhaClicadoParaAtualizacao);
                
                formularioAutorView.setAutor(autor);
              
            }
        }); 
        
        controllerAutor = controller;
    }

    public void initView() {
        tabelaAutorView.getTabelaAutor().setModel(autorTableModel);
        
        java.awt.EventQueue.invokeLater(() -> this.setVisible(true));
    }

    public Autor getAutorFormulario() {
        String nome = formularioAutorView.getNomeCampo().getText();
        String documento = formularioAutorView.getDocumentoCampo().getText();
        String naturalidade = formularioAutorView.getNaturalidadeCampo().getText();
        String[] arrayLivros = formularioAutorView.getLivrosCampo().getText().split(";");
        LocalDate dataNascimento = LocalDate.parse(formularioAutorView.getDataNascimentoCampo().getText(),DateTimeFormatter.ofPattern("dd/MM/yyyy"));
        
        List<Livro> livros = new ArrayList();
        
        for(int i=0;i<arrayLivros.length;i++){
            arrayLivros[i] = arrayLivros[i].trim();
            if (arrayLivros[i]!=""&&arrayLivros[i].matches("[0-9]+")){
                Livro l = controllerAutor.consultarLivro(Integer.parseInt(arrayLivros[i]));
                
                if (l!=null){
                    livros.add(l);
                }
            }
        }
    
        return new Autor(nome, dataNascimento, documento, naturalidade, livros);
    }

    public void inserirAutorView(Autor autor) {
        autorTableModel.adicionaAutor(autor);
    }

    public void apresentaErro(String erro) {
        JOptionPane.showMessageDialog(null, erro + "\n", "Erro", JOptionPane.ERROR_MESSAGE);
    }

    public void mostrarListaAutores(List<Autor> lista) {
       autorTableModel.setListaAutor(lista);
    }
    
    public List<Autor> getAutoresParaExcluir(){
        int[] linhasSelecionadas = this.tabelaAutorView.getTabelaAutor().getSelectedRows();
        List<Autor> listaExcluir = new ArrayList();
        
        for (int i=0;i<linhasSelecionadas.length;i++){
            Autor autor = autorTableModel.getAutor(linhasSelecionadas[i]);
            listaExcluir.add(autor);
        }
        
        return listaExcluir;
    }

    public void excluirAutorView(List<Autor> listaParaExcluir) {
         autorTableModel.removeAutores(listaParaExcluir);
    }

    public Autor getAutorParaAtualizar() {
        Autor autor = formularioAutorView.getAutorSelecionadoParaAtualizacao();
        System.out.println(autor.getListaLivros());
        String[] arrayLivros = autor.getListaLivros().split(";");
        
        List<Livro> livros = new ArrayList();
        
        for(int i=0;i<arrayLivros.length;i++){
            arrayLivros[i] = arrayLivros[i].trim();
            if (arrayLivros[i]!=""&&arrayLivros[i].matches("[0-9]+")){
                Livro l = controllerAutor.consultarLivro(Integer.parseInt(arrayLivros[i]));
                System.out.println(l.getId());
                if (l!=null){
                    livros.add(l);
                }
            }
        }
        
        autor.setLivros(livros, 2);
        
        return autor;
    }

    public void atualizarAutor(Autor autor) {
        autorTableModel.fireTableRowsUpdated(linhaClicadoParaAtualizacao, linhaClicadoParaAtualizacao);
    }

    public void apresentaInfo(String info) {
        JOptionPane.showMessageDialog(null, info + "\n", "Informação", JOptionPane.INFORMATION_MESSAGE);
    }
}
