/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.ufpr.sistemabanco.view.cliente;

import java.awt.event.MouseAdapter;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.TableRowSorter;
import org.ufpr.sistemabanco.controller.ClienteController;
import org.ufpr.sistemabanco.model.Cliente;

/**
 *
 * @author Lia
 */
public class JanelaClienteView extends javax.swing.JFrame {

    /**
     * Creates new form JanelaClienteView
     */
    public JanelaClienteView() {
        initComponents();
        
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        botoesClienteView = new org.ufpr.sistemabanco.view.cliente.botoesClienteView();
        tabelaClienteView = new org.ufpr.sistemabanco.view.cliente.TabelaClienteView();
        formularioClienteView = new org.ufpr.sistemabanco.view.cliente.FormularioClienteView();
        buscaClienteView = new org.ufpr.sistemabanco.view.cliente.BuscaClienteView();

        jButton1.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(tabelaClienteView, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(buscaClienteView, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(botoesClienteView, javax.swing.GroupLayout.PREFERRED_SIZE, 410, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(formularioClienteView, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(buscaClienteView, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(tabelaClienteView, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(botoesClienteView, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(formularioClienteView, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(14, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.ufpr.sistemabanco.view.cliente.botoesClienteView botoesClienteView;
    private org.ufpr.sistemabanco.view.cliente.BuscaClienteView buscaClienteView;
    private org.ufpr.sistemabanco.view.cliente.FormularioClienteView formularioClienteView;
    private javax.swing.JButton jButton1;
    private org.ufpr.sistemabanco.view.cliente.TabelaClienteView tabelaClienteView;
    // End of variables declaration//GEN-END:variables

    private ClienteTableModel clienteTableModel = new ClienteTableModel();
    private int linhaClicadaParaAtualizacao = -1;
    
    public void setController(ClienteController controller) {
        botoesClienteView.setController(controller);
        buscaClienteView.setController(controller);
        
        tabelaClienteView.getTabelaCliente().addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                
                linhaClicadaParaAtualizacao =  tabelaClienteView.getTabelaCliente().rowAtPoint(evt.getPoint());
               
              Cliente cliente = clienteTableModel.getCliente(linhaClicadaParaAtualizacao);
              
              formularioClienteView.setCliente(cliente);
             
            }
        }); 
    }

    public void initView() {
         java.awt.EventQueue.invokeLater(() -> this.setVisible(true));
         
         tabelaClienteView.getTabelaCliente().setModel(clienteTableModel);
         
        TableRowSorter<ClienteTableModel> sorter = new TableRowSorter(tabelaClienteView.getTabelaCliente().getModel());
        sorter.setComparator(0, new Comparator<String>() {
 
            @Override
            public int compare(String name1, String name2) {
                return name1.compareTo(name2);
            }
        });
        sorter.setComparator(1, new Comparator<String>() {
 
            @Override
            public int compare(String name1, String name2) {
                return name1.compareTo(name2);
            }
        });
        tabelaClienteView.getTabelaCliente().setRowSorter(sorter);
    }

    public Cliente getClienteFormulario() {
      String nome = formularioClienteView.getNomeCampo().getText();
      String sobrenome = formularioClienteView.getSobrenomeCampo().getText();
      String rg = formularioClienteView.getRgCampo().getText();
      String cpf = formularioClienteView.getCpfCampo().getText();
      String endereco = formularioClienteView.getEnderecoCampo().getText();
      double salario = formularioClienteView.getSalarioCampo().getText().equals("")?0.0:Double.parseDouble(formularioClienteView.getSalarioCampo().getText().replace(",","."));

      return new Cliente(nome, sobrenome, rg, cpf, endereco, salario);
    }

    public void inserirClienteView(Cliente cliente) {
        clienteTableModel.adicionaCliente(cliente);
    }

    public void mostrarListaClientes(List<Cliente> lista) {
        clienteTableModel.setListaCliente(lista);
    }
    
    public List<Cliente> getClientesParaExcluir(){
        int[] linhasSelecionadas = this.tabelaClienteView.getTabelaCliente().getSelectedRows();
        List<Cliente> listaExcluir = new ArrayList();
          
        for (int i=0;i<linhasSelecionadas.length;i++){
            Cliente cliente = clienteTableModel.getCliente(linhasSelecionadas[i]);
            listaExcluir.add(cliente);
        }
           
        return listaExcluir;
    }
    
    public void apresentaInfo(String info) {
        JOptionPane.showMessageDialog(null, info + "\n", "Informação", JOptionPane.INFORMATION_MESSAGE);
    }

    public void apresentaErro(String erro) {
        JOptionPane.showMessageDialog(null, erro + "\n", "Erro", JOptionPane.ERROR_MESSAGE);
    }

    public void excluirClienteView(List<Cliente> listaParaExcluir) {
        clienteTableModel.removeClientes(listaParaExcluir);
    }

    public Cliente getClienteParaAtualizar() {
        return formularioClienteView.getClienteSelecionadoParaAtualizacao();
    }

    public void atualizarCliente(Cliente cliente) {
        clienteTableModel.fireTableRowsUpdated(linhaClicadaParaAtualizacao, linhaClicadaParaAtualizacao);
    }

    public String getBusca() {
        return buscaClienteView.getBuscaCampo().getText();
    }
}
